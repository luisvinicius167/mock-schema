{"version":3,"sources":["../src/mockschema.js"],"names":["root","factory","define","amd","exports","module","createSchema","mock","MockSchema","global","_schema","createDumbArray","len","dumbArray","i","push","createStructure","obj","times","mocked","forEach","name","index","_mock","Object","assign","id","schema","quantity","_strucuture","mockedData","key","value"],"mappings":";;;;AAAA;AACC,WAAUA,IAAV,EAAgBC,OAAhB,EAAyB;AACxB,MAAI,OAAOC,MAAP,KAAkB,UAAlB,IAAgCA,OAAOC,GAA3C,EAAgD;AAC9CD,WAAO,EAAP,EAAWD,OAAX;AACD,GAFD,MAEO,IAAI,QAAOG,OAAP,yCAAOA,OAAP,OAAmB,QAAvB,EAAiC;AACtCC,WAAOD,OAAP,GAAiB;AACfE,oBAAcL,QAAQK,YADP;AAEfC,YAAMN,QAAQM;AAFC,KAAjB;AAID,GALM,MAKA;AACLP,SAAKQ,UAAL,GAAkBP,OAAlB;AACD;AACF,CAXA,EAWC,IAXD,EAWO,UAAUQ,MAAV,EAAkB;AACxB;;;;;AAKA,MAAIC,UAAU,EAAd;;AAEA;;;;AAIA,WAASC,eAAT,CAAyBC,GAAzB,EAA8B;AAC5B,QAAIC,YAAY,EAAhB;AACA,SAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIF,GAApB,EAAyBE,GAAzB,EAA8B;AAC5BD,gBAAUE,IAAV,CAAeD,CAAf;AACD;AACD,WAAOD,SAAP;AACD;;AAED;;;;AAIA,WAASG,eAAT,CAAyBC,GAAzB,EAA8BC,KAA9B,EAAqC;AACnC,QAAIC,SAAS,EAAb;AACAR,oBAAgBO,KAAhB,EAAuBE,OAAvB,CAA+B,UAACC,IAAD,EAAOC,KAAP,EAAiB;AAC9C,UAAIC,QAAQC,OAAOC,MAAP,CAAc,EAAd,EAAkBR,GAAlB,CAAZ;AACAM,YAAMG,EAAN,GAAWJ,KAAX;AACAH,aAAOJ,IAAP,CAAYQ,KAAZ;AACD,KAJD;AAKA,WAAOJ,MAAP;AACD;;AAED;;;;;AAKA,WAASb,YAAT,CAAsBqB,MAAtB,EAA8B;AAC5BH,WAAOC,MAAP,CAAcf,OAAd,EAAuBiB,MAAvB;AACD;;AAED;;;;;;;AAOA,WAASpB,IAAT,CAAcoB,MAAd,EAAsBC,QAAtB,EAAgC;AAC9B,QAAIC,oBAAJ;AAAA,QACEC,aAAa,EADf;;AAGA,WAAOH,MAAP,KAAkB,QAAlB,GACIE,cAAcnB,QAAQiB,MAAR,CADlB,GAEIE,cAAcF,MAFlB;;AAIA,SAAK,IAAII,GAAT,IAAgBF,WAAhB,EAA6B;AAC3B,UAAIG,QAAQH,YAAYE,GAAZ,CAAZ;AACAP,aAAOC,MAAP,CAAcK,UAAd,sBAA4BC,GAA5B,EAAkCC,KAAlC;AACD;AACD,WAAOhB,gBAAgBc,UAAhB,EAA4BF,QAA5B,CAAP;AACD;;AAED,SAAO,EAACrB,MAAMA,IAAP,EAAaD,cAAcA,YAA3B,EAAP;AACD,CAlEO,CAkEN,IAlEM,CAXP,CAAD","file":"mockschema.js","sourcesContent":[";\n(function (root, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define([], factory);\n  } else if (typeof exports === \"object\") {\n    module.exports = {\n      createSchema: factory.createSchema,\n      mock: factory.mock\n    }\n  } else {\n    root.MockSchema = factory;\n  }\n}(this, function (global) {\n  /**\n * @private\n * @name _schema\n * @description The structure of schema\n */\n  let _schema = {};\n\n  /**\n * @name createDumbArray\n * @description create an Array with determined Length\n */\n  function createDumbArray(len) {\n    let dumbArray = []\n    for (let i = 0; i < len; i++) {\n      dumbArray.push(i);\n    }\n    return dumbArray;\n  }\n\n  /**\n * @name createStructure\n * @description function for create the Schema Structure\n */\n  function createStructure(obj, times) {\n    let mocked = [];\n    createDumbArray(times).forEach((name, index) => {\n      let _mock = Object.assign({}, obj);\n      _mock.id = index;\n      mocked.push(_mock)\n    });\n    return mocked;\n  }\n\n  /**\n * @name createSchema\n * @param {Object} schema The Schema model\n * @return void 0\n */\n  function createSchema(schema) {\n    Object.assign(_schema, schema);\n  }\n\n  /**\n * @name mock\n * @description always return an array with the Schema structure\n * @param {Object|String} The Schema Model\n * @param quantity The quantity of objects that will be returned\n * @return {Array}\n */\n  function mock(schema, quantity) {\n    let _strucuture,\n      mockedData = {};\n\n    typeof schema === \"string\"\n      ? _strucuture = _schema[schema]\n      : _strucuture = schema;\n\n    for (let key in _strucuture) {\n      let value = _strucuture[key];\n      Object.assign(mockedData, {[key]: value});\n    }\n    return createStructure(mockedData, quantity);\n  };\n\n  return {mock: mock, createSchema: createSchema}\n}(this)));"]}